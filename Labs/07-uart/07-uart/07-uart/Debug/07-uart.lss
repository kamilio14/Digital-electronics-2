
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800156  00800156  0000071c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a6  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac1  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aec  00000000  00000000  000029f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc7  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000048ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_18>
  4c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
}/* lcd_init */
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1e2:	8b e0       	ldi	r24, 0x0B	; 11
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1f2:	82 e1       	ldi	r24, 0x12	; 18
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 202:	87 e1       	ldi	r24, 0x17	; 23
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 212:	89 e1       	ldi	r24, 0x19	; 25
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 222:	8b e1       	ldi	r24, 0x1B	; 27
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |=  (1<<REFS0);
 22a:	ec e7       	ldi	r30, 0x7C	; 124
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	ADMUX &=  ~(1<<REFS1);
 234:	80 81       	ld	r24, Z
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	80 83       	st	Z, r24

    // Set input channel to ADC0
	ADMUX &=  ~((1<<MUX0) | (1<<MUX1)  | (1<<MUX2)| (1<<MUX3));
 23a:	80 81       	ld	r24, Z
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	80 83       	st	Z, r24
	
	// Enable ADC module
	
	ADCSRA |= (1<<ADEN);
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 68       	ori	r24, 0x80	; 128
 248:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 250:	80 81       	ld	r24, Z
 252:	87 60       	ori	r24, 0x07	; 7
 254:	80 83       	st	Z, r24


    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8b 7f       	andi	r24, 0xFB	; 251
 25e:	80 83       	st	Z, r24
 260:	80 81       	ld	r24, Z
 262:	83 60       	ori	r24, 0x03	; 3
 264:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 266:	ef e6       	ldi	r30, 0x6F	; 111
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 270:	87 e6       	ldi	r24, 0x67	; 103
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_init>
	


    // Enables interrupts by setting the global interrupt mask
    sei();
 278:	78 94       	sei
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0xa6>

0000027c <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24

}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	ca 54       	subi	r28, 0x4A	; 74
 2d6:	d1 09       	sbc	r29, r1
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	cd bf       	out	0x3d, r28	; 61
    uint16_t value = ADC;
 2dc:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2e0:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char lcd_string[10] = "          ";
 2e4:	8a e0       	ldi	r24, 0x0A	; 10
 2e6:	e0 e0       	ldi	r30, 0x00	; 0
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
 2ea:	de 01       	movw	r26, r28
 2ec:	11 96       	adiw	r26, 0x01	; 1
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	8a 95       	dec	r24
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <__vector_21+0x48>
	
	//clearing 
	lcd_gotoxy(8,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 306:	4a e0       	ldi	r20, 0x0A	; 10
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
	
	//Printing decimals
	itoa(value, lcd_string, 10);
	lcd_gotoxy(8,0);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	//send data via UArt
	
		
	uart_puts("ADC value in decimal: ");
 324:	8d e1       	ldi	r24, 0x1D	; 29
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_puts>
	uart_puts(lcd_string);
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_puts>
	uart_puts("\r\n");
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_puts>
 33c:	40 e1       	ldi	r20, 0x10	; 16
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	c8 01       	movw	r24, r16
 346:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>

	

	// printing hex
	itoa(value, lcd_string, 16);
	lcd_gotoxy(13,0);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	8d e0       	ldi	r24, 0x0D	; 13
 34e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	
	
	//clear key position
	lcd_gotoxy(8,1);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("          ");
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	lcd_gotoxy(8,1);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	88 e0       	ldi	r24, 0x08	; 8
 36e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 	if(value > 1018)
 372:	0b 3f       	cpi	r16, 0xFB	; 251
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	18 07       	cpc	r17, r24
 378:	20 f0       	brcs	.+8      	; 0x382 <__vector_21+0xdc>
 	{
	 	lcd_puts("None");
 37a:	87 e3       	ldi	r24, 0x37	; 55
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	 	
	 	
 	}
 	if(value > 10 && value < 200)
 382:	c8 01       	movw	r24, r16
 384:	0b 97       	sbiw	r24, 0x0b	; 11
 386:	8d 3b       	cpi	r24, 0xBD	; 189
 388:	91 05       	cpc	r25, r1
 38a:	20 f4       	brcc	.+8      	; 0x394 <__vector_21+0xee>
 	{
	 	lcd_puts("UP");
 38c:	8c e3       	ldi	r24, 0x3C	; 60
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 	}
 	
 	if(value > 205 && value < 300)
 394:	c8 01       	movw	r24, r16
 396:	8e 5c       	subi	r24, 0xCE	; 206
 398:	91 09       	sbc	r25, r1
 39a:	8e 35       	cpi	r24, 0x5E	; 94
 39c:	91 05       	cpc	r25, r1
 39e:	20 f4       	brcc	.+8      	; 0x3a8 <__vector_21+0x102>
 	{
	 	lcd_puts("DOWN");
 3a0:	8f e3       	ldi	r24, 0x3F	; 63
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 	}
 	if(value > 350 && value < 450)
 3a8:	c8 01       	movw	r24, r16
 3aa:	8f 55       	subi	r24, 0x5F	; 95
 3ac:	91 40       	sbci	r25, 0x01	; 1
 3ae:	83 36       	cpi	r24, 0x63	; 99
 3b0:	91 05       	cpc	r25, r1
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <__vector_21+0x116>
 	{
	 	lcd_puts("LEFT");
 3b4:	84 e4       	ldi	r24, 0x44	; 68
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 	}
 	if(value > 600 && value < 700)
 3bc:	c8 01       	movw	r24, r16
 3be:	89 55       	subi	r24, 0x59	; 89
 3c0:	92 40       	sbci	r25, 0x02	; 2
 3c2:	83 36       	cpi	r24, 0x63	; 99
 3c4:	91 05       	cpc	r25, r1
 3c6:	20 f4       	brcc	.+8      	; 0x3d0 <__vector_21+0x12a>
 	{
	 	lcd_puts("SELECT");
 3c8:	89 e4       	ldi	r24, 0x49	; 73
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 	}
 	if(value < 5)
 3d0:	05 30       	cpi	r16, 0x05	; 5
 3d2:	11 05       	cpc	r17, r1
 3d4:	20 f4       	brcc	.+8      	; 0x3de <__vector_21+0x138>
 	{
	 	lcd_puts("RIGHT");
 3d6:	80 e5       	ldi	r24, 0x50	; 80
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 	}
	 
	int storage[32];
	int i = 0,j,parity = 0;
	
	while (value>0)
 3de:	01 15       	cp	r16, r1
 3e0:	11 05       	cpc	r17, r1
 3e2:	61 f1       	breq	.+88     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3e4:	de 01       	movw	r26, r28
 3e6:	1b 96       	adiw	r26, 0x0b	; 11
 3e8:	e0 e0       	ldi	r30, 0x00	; 0
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <__vector_21+0x14a>
	{
		storage[i] = value % 2;
		value = value/2;
		i ++;	
 3ee:	fc 01       	movw	r30, r24
	int storage[32];
	int i = 0,j,parity = 0;
	
	while (value>0)
	{
		storage[i] = value % 2;
 3f0:	c8 01       	movw	r24, r16
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	99 27       	eor	r25, r25
 3f6:	8d 93       	st	X+, r24
 3f8:	9d 93       	st	X+, r25
		value = value/2;
 3fa:	16 95       	lsr	r17
 3fc:	07 95       	ror	r16
		i ++;	
 3fe:	cf 01       	movw	r24, r30
 400:	01 96       	adiw	r24, 0x01	; 1
 	}
	 
	int storage[32];
	int i = 0,j,parity = 0;
	
	while (value>0)
 402:	01 15       	cp	r16, r1
 404:	11 05       	cpc	r17, r1
 406:	99 f7       	brne	.-26     	; 0x3ee <__vector_21+0x148>
		storage[i] = value % 2;
		value = value/2;
		i ++;	
	} 
	
	for (j=i-1; j>0; j--)
 408:	1e 16       	cp	r1, r30
 40a:	1f 06       	cpc	r1, r31
 40c:	d4 f4       	brge	.+52     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	ec 0f       	add	r30, r28
 414:	fd 1f       	adc	r31, r29
 416:	3d 96       	adiw	r30, 0x0d	; 13
 418:	ae 01       	movw	r20, r28
 41a:	43 5f       	subi	r20, 0xF3	; 243
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
		if(storage[j] ==1)
 422:	32 91       	ld	r19, -Z
 424:	22 91       	ld	r18, -Z
 426:	21 30       	cpi	r18, 0x01	; 1
 428:	31 05       	cpc	r19, r1
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			parity++;
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}
	else
	{
	parity=0;	
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
		storage[i] = value % 2;
		value = value/2;
		i ++;	
	} 
	
	for (j=i-1; j>0; j--)
 434:	e4 17       	cp	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	a1 f7       	brne	.-24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 	{
	 	lcd_puts("RIGHT");
 	}
	 
	int storage[32];
	int i = 0,j,parity = 0;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	4a e0       	ldi	r20, 0x0A	; 10
 448:	be 01       	movw	r22, r28
 44a:	6f 5f       	subi	r22, 0xFF	; 255
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__itoa_ncheck>
	{
	parity=0;	
	}
	
	itoa(parity, lcd_string, 10);
	lcd_gotoxy(15,1);
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	8f e0       	ldi	r24, 0x0F	; 15
 456:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

	
 462:	c6 5b       	subi	r28, 0xB6	; 182
 464:	df 4f       	sbci	r29, 0xFF	; 255
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
 4ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4b2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4b6:	8c 71       	andi	r24, 0x1C	; 28
 4b8:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <UART_RxHead>
 4bc:	ef 5f       	subi	r30, 0xFF	; 255
 4be:	ef 71       	andi	r30, 0x1F	; 31
 4c0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART_RxTail>
 4c4:	e9 17       	cp	r30, r25
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <__vector_18+0x3c>
 4c8:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <UART_RxHead>
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	e5 5a       	subi	r30, 0xA5	; 165
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	20 83       	st	Z, r18
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <__vector_18+0x3e>
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__data_end>
 4dc:	89 2b       	or	r24, r25
 4de:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__vector_19>:
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
 508:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <UART_TxHead>
 50c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <UART_TxTail>
 510:	98 17       	cp	r25, r24
 512:	69 f0       	breq	.+26     	; 0x52e <__vector_19+0x38>
 514:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <UART_TxTail>
 518:	ef 5f       	subi	r30, 0xFF	; 255
 51a:	ef 71       	andi	r30, 0x1F	; 31
 51c:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <UART_TxTail>
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	e5 58       	subi	r30, 0x85	; 133
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	80 81       	ld	r24, Z
 528:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <__vector_19+0x42>
 52e:	e1 ec       	ldi	r30, 0xC1	; 193
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	8f 7d       	andi	r24, 0xDF	; 223
 536:	80 83       	st	Z, r24
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <uart_init>:
 54a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <UART_TxHead>
 54e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <UART_TxTail>
 552:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <UART_RxHead>
 556:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <UART_RxTail>
 55a:	99 23       	and	r25, r25
 55c:	1c f4       	brge	.+6      	; 0x564 <uart_init+0x1a>
 55e:	22 e0       	ldi	r18, 0x02	; 2
 560:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 564:	90 78       	andi	r25, 0x80	; 128
 566:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 56a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 56e:	88 e9       	ldi	r24, 0x98	; 152
 570:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 57a:	08 95       	ret

0000057c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 57c:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <UART_TxHead>
 580:	2f 5f       	subi	r18, 0xFF	; 255
 582:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 584:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_TxTail>
 588:	29 17       	cp	r18, r25
 58a:	e1 f3       	breq	.-8      	; 0x584 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 58c:	e2 2f       	mov	r30, r18
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	e5 58       	subi	r30, 0x85	; 133
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 596:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 59a:	e1 ec       	ldi	r30, 0xC1	; 193
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	80 62       	ori	r24, 0x20	; 32
 5a2:	80 83       	st	Z, r24
 5a4:	08 95       	ret

000005a6 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
    while (*s)
 5ac:	88 81       	ld	r24, Y
 5ae:	88 23       	and	r24, r24
 5b0:	31 f0       	breq	.+12     	; 0x5be <uart_puts+0x18>
 5b2:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 5b4:	0e 94 be 02 	call	0x57c	; 0x57c <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 5b8:	89 91       	ld	r24, Y+
 5ba:	81 11       	cpse	r24, r1
 5bc:	fb cf       	rjmp	.-10     	; 0x5b4 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <__itoa_ncheck>:
 5c4:	bb 27       	eor	r27, r27
 5c6:	4a 30       	cpi	r20, 0x0A	; 10
 5c8:	31 f4       	brne	.+12     	; 0x5d6 <__itoa_ncheck+0x12>
 5ca:	99 23       	and	r25, r25
 5cc:	22 f4       	brpl	.+8      	; 0x5d6 <__itoa_ncheck+0x12>
 5ce:	bd e2       	ldi	r27, 0x2D	; 45
 5d0:	90 95       	com	r25
 5d2:	81 95       	neg	r24
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__utoa_common>

000005da <__utoa_ncheck>:
 5da:	bb 27       	eor	r27, r27

000005dc <__utoa_common>:
 5dc:	fb 01       	movw	r30, r22
 5de:	55 27       	eor	r21, r21
 5e0:	aa 27       	eor	r26, r26
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	aa 1f       	adc	r26, r26
 5e8:	a4 17       	cp	r26, r20
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <__utoa_common+0x14>
 5ec:	a4 1b       	sub	r26, r20
 5ee:	83 95       	inc	r24
 5f0:	50 51       	subi	r21, 0x10	; 16
 5f2:	b9 f7       	brne	.-18     	; 0x5e2 <__utoa_common+0x6>
 5f4:	a0 5d       	subi	r26, 0xD0	; 208
 5f6:	aa 33       	cpi	r26, 0x3A	; 58
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <__utoa_common+0x20>
 5fa:	a9 5d       	subi	r26, 0xD9	; 217
 5fc:	a1 93       	st	Z+, r26
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	79 f7       	brne	.-34     	; 0x5e0 <__utoa_common+0x4>
 602:	b1 11       	cpse	r27, r1
 604:	b1 93       	st	Z+, r27
 606:	11 92       	st	Z+, r1
 608:	cb 01       	movw	r24, r22
 60a:	0c 94 07 03 	jmp	0x60e	; 0x60e <strrev>

0000060e <strrev>:
 60e:	dc 01       	movw	r26, r24
 610:	fc 01       	movw	r30, r24
 612:	67 2f       	mov	r22, r23
 614:	71 91       	ld	r23, Z+
 616:	77 23       	and	r23, r23
 618:	e1 f7       	brne	.-8      	; 0x612 <strrev+0x4>
 61a:	32 97       	sbiw	r30, 0x02	; 2
 61c:	04 c0       	rjmp	.+8      	; 0x626 <strrev+0x18>
 61e:	7c 91       	ld	r23, X
 620:	6d 93       	st	X+, r22
 622:	70 83       	st	Z, r23
 624:	62 91       	ld	r22, -Z
 626:	ae 17       	cp	r26, r30
 628:	bf 07       	cpc	r27, r31
 62a:	c8 f3       	brcs	.-14     	; 0x61e <strrev+0x10>
 62c:	08 95       	ret

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
