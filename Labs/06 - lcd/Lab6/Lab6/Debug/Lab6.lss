
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000055a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800138  00800138  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001506  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000944  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d5  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_data>:
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
 120:	61 11       	cpse	r22, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_gotoxy+0xc>
 124:	80 58       	subi	r24, 0x80	; 128
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret
 12c:	80 54       	subi	r24, 0x40	; 64
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_clrscr>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_putc>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 142:	08 95       	ret

00000144 <lcd_puts>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	29 f0       	breq	.+10     	; 0x15e <lcd_puts+0x1a>
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <lcd_puts+0x10>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_init>:
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
 168:	20 9a       	sbi	0x04, 0	; 4
 16a:	55 9a       	sbi	0x0a, 5	; 10
 16c:	21 9a       	sbi	0x04, 1	; 4
 16e:	54 9a       	sbi	0x0a, 4	; 10
 170:	55 9a       	sbi	0x0a, 5	; 10
 172:	56 9a       	sbi	0x0a, 6	; 10
 174:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x1c>
 180:	00 00       	nop
 182:	5d 9a       	sbi	0x0b, 5	; 11
 184:	5c 9a       	sbi	0x0b, 4	; 11
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x2a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x30>
 194:	00 00       	nop
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19a:	95 e1       	ldi	r25, 0x15	; 21
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x38>
 1a0:	00 00       	nop
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x44>
 1ac:	00 00       	nop
 1ae:	5c 98       	cbi	0x0b, 4	; 11
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b4:	95 e1       	ldi	r25, 0x15	; 21
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x52>
 1ba:	00 00       	nop
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1c8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_clrscr>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_init>
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d1 e0       	ldi	r29, 0x01	; 1
 1ec:	00 e3       	ldi	r16, 0x30	; 48
 1ee:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 48; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 1f0:	89 91       	ld	r24, Y+
 1f2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 48; i++)
 1f6:	c0 17       	cp	r28, r16
 1f8:	d1 07       	cpc	r29, r17
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
	
    // Put string(s) at LCD display
	
	
	
    lcd_gotoxy(1, 0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
    lcd_puts("00:00.0");
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
	lcd_gotoxy(11, 0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8b e0       	ldi	r24, 0x0B	; 11
 216:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
    lcd_putc('a');
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	lcd_gotoxy(1, 1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('b');
 228:	82 e6       	ldi	r24, 0x62	; 98
 22a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	lcd_gotoxy(11, 1);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8b e0       	ldi	r24, 0x0B	; 11
 232:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('c');
 236:	83 e6       	ldi	r24, 0x63	; 99
 238:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms();
 23c:	e1 eb       	ldi	r30, 0xB1	; 177
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	87 60       	ori	r24, 0x07	; 7
 244:	80 83       	st	Z, r24
 246:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 248:	e0 e7       	ldi	r30, 0x70	; 112
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 83       	st	Z, r24
// 	
 	TIM0_overflow_16ms();
 252:	85 b5       	in	r24, 0x25	; 37
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	85 bd       	out	0x25, r24	; 37
 258:	85 b5       	in	r24, 0x25	; 37
 25a:	85 60       	ori	r24, 0x05	; 5
 25c:	85 bd       	out	0x25, r24	; 37
 	TIM0_overflow_interrupt_enable();
 25e:	ee e6       	ldi	r30, 0x6E	; 110
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
// 	

    // Enables interrupts by setting the global interrupt mask
    sei();
 268:	78 94       	sei
 26a:	ff cf       	rjmp	.-2      	; 0x26a <main+0x8e>

0000026c <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	1f 93       	push	r17
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <__vector_9+0x2a>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;
	static uint8_t secs = 0;
	static uint8_t min = 0;
	uint16_t squaresecs = secs * secs;
 29a:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <secs.1953>
	
	//static uint8_t secs_1 = 0;
	char lcd_string[2] = " ";	//string for converting numbers 
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9a 83       	std	Y+2, r25	; 0x02
 2a4:	89 83       	std	Y+1, r24	; 0x01
    number_of_overflows++;
 2a6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <number_of_overflows.1951>
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2ac:	86 30       	cpi	r24, 0x06	; 6
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <__vector_9+0x4a>
	static uint8_t min = 0;
	uint16_t squaresecs = secs * secs;
	
	//static uint8_t secs_1 = 0;
	char lcd_string[2] = " ";	//string for converting numbers 
    number_of_overflows++;
 2b0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <number_of_overflows.1951>
 2b4:	85 c0       	rjmp	.+266    	; 0x3c0 <__vector_9+0x154>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2b6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <number_of_overflows.1951>
		tens ++;
 2ba:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <tens.1952>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens > 9) 
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	18 f4       	brcc	.+6      	; 0x2ca <__vector_9+0x5e>
    number_of_overflows++;
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
		tens ++;
 2c4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <tens.1952>
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <__vector_9+0x6a>
		if (tens > 9) 
		{
		tens = 0;	
 2ca:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <tens.1952>
		secs ++;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	81 0f       	add	r24, r17
 2d2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <secs.1953>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <tens.1952>
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	be 01       	movw	r22, r28
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 76 02 	call	0x4ec	; 0x4ec <__itoa_ncheck>
		}
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7, 0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_puts(lcd_string);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		
		if (secs > 59)
 2f8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <secs.1953>
 2fc:	8c 33       	cpi	r24, 0x3C	; 60
 2fe:	70 f0       	brcs	.+28     	; 0x31c <__vector_9+0xb0>
		{
			secs = 0;
 300:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <secs.1953>
			min ++;
 304:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <min.1954>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <min.1954>
			lcd_gotoxy(4, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc('0');
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 31c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <secs.1953>
 320:	4a e0       	ldi	r20, 0x0A	; 10
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 76 02 	call	0x4ec	; 0x4ec <__itoa_ncheck>
		}
		itoa(secs, lcd_string, 10);
		if (secs > 9)
 32e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <secs.1953>
 332:	8a 30       	cpi	r24, 0x0A	; 10
 334:	28 f0       	brcs	.+10     	; 0x340 <__vector_9+0xd4>
		{
			lcd_gotoxy(4,0);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <__vector_9+0xdc>
		}
		else
		{
			lcd_gotoxy(5,0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		
		if (min > 60)
 350:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <min.1954>
 354:	8d 33       	cpi	r24, 0x3D	; 61
 356:	48 f0       	brcs	.+18     	; 0x36a <__vector_9+0xfe>
		{
			min = 0;
 358:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <min.1954>
			lcd_putc('0');
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(2, 0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 36a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <min.1954>
 36e:	4a e0       	ldi	r20, 0x0A	; 10
 370:	be 01       	movw	r22, r28
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 76 02 	call	0x4ec	; 0x4ec <__itoa_ncheck>
			
		}
		itoa(min, lcd_string, 10);
		if (min > 9)
 37c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <min.1954>
 380:	8a 30       	cpi	r24, 0x0A	; 10
 382:	28 f0       	brcs	.+10     	; 0x38e <__vector_9+0x122>
		{
			lcd_gotoxy(1,0);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 38c:	04 c0       	rjmp	.+8      	; 0x396 <__vector_9+0x12a>
		}
		else
		{
			lcd_gotoxy(2,0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 39e:	4a e0       	ldi	r20, 0x0A	; 10
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	11 9f       	mul	r17, r17
 3a8:	c0 01       	movw	r24, r0
 3aa:	11 24       	eor	r1, r1
 3ac:	0e 94 76 02 	call	0x4ec	; 0x4ec <__itoa_ncheck>
			lcd_gotoxy(11, 0);
			lcd_puts("0  ");
		}
		else 
		{
			lcd_gotoxy(11,0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	8b e0       	ldi	r24, 0x0B	; 11
 3b4:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 	}
 }
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	1f 91       	pop	r17
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	static uint8_t ovrflov = 0;
	
	ovrflov ++;
if(ovrflov >= 1)

	ovrflov = 0;
 40e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <ovrflov.1964>
	lcd_gotoxy(1 + position, 1);
 412:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <position.1963>
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc(symbol);
 41e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 422:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	symbol ++;
 426:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	if(symbol > 5)
 430:	86 30       	cpi	r24, 0x06	; 6
 432:	08 f4       	brcc	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	4a c0       	rjmp	.+148    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	{
		position ++;
 436:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <position.1963>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <position.1963>
		symbol = 0;
 440:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
		
		if(position == 9)
 444:	89 30       	cpi	r24, 0x09	; 9
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	40 c0       	rjmp	.+128    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		{
			position = 0;
 44a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <position.1963>
			
			lcd_gotoxy(9,1);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(8,1);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(7,1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(6,1);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	86 e0       	ldi	r24, 0x06	; 6
 47a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(5,1);
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	85 e0       	ldi	r24, 0x05	; 5
 488:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(4,1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	84 e0       	ldi	r24, 0x04	; 4
 496:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(3,1);
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(2,1);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(1,1);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			}
		
			}
		
	
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__itoa_ncheck>:
 4ec:	bb 27       	eor	r27, r27
 4ee:	4a 30       	cpi	r20, 0x0A	; 10
 4f0:	31 f4       	brne	.+12     	; 0x4fe <__itoa_ncheck+0x12>
 4f2:	99 23       	and	r25, r25
 4f4:	22 f4       	brpl	.+8      	; 0x4fe <__itoa_ncheck+0x12>
 4f6:	bd e2       	ldi	r27, 0x2D	; 45
 4f8:	90 95       	com	r25
 4fa:	81 95       	neg	r24
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	0c 94 82 02 	jmp	0x504	; 0x504 <__utoa_common>

00000502 <__utoa_ncheck>:
 502:	bb 27       	eor	r27, r27

00000504 <__utoa_common>:
 504:	fb 01       	movw	r30, r22
 506:	55 27       	eor	r21, r21
 508:	aa 27       	eor	r26, r26
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	aa 1f       	adc	r26, r26
 510:	a4 17       	cp	r26, r20
 512:	10 f0       	brcs	.+4      	; 0x518 <__utoa_common+0x14>
 514:	a4 1b       	sub	r26, r20
 516:	83 95       	inc	r24
 518:	50 51       	subi	r21, 0x10	; 16
 51a:	b9 f7       	brne	.-18     	; 0x50a <__utoa_common+0x6>
 51c:	a0 5d       	subi	r26, 0xD0	; 208
 51e:	aa 33       	cpi	r26, 0x3A	; 58
 520:	08 f0       	brcs	.+2      	; 0x524 <__utoa_common+0x20>
 522:	a9 5d       	subi	r26, 0xD9	; 217
 524:	a1 93       	st	Z+, r26
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	79 f7       	brne	.-34     	; 0x508 <__utoa_common+0x4>
 52a:	b1 11       	cpse	r27, r1
 52c:	b1 93       	st	Z+, r27
 52e:	11 92       	st	Z+, r1
 530:	cb 01       	movw	r24, r22
 532:	0c 94 9b 02 	jmp	0x536	; 0x536 <strrev>

00000536 <strrev>:
 536:	dc 01       	movw	r26, r24
 538:	fc 01       	movw	r30, r24
 53a:	67 2f       	mov	r22, r23
 53c:	71 91       	ld	r23, Z+
 53e:	77 23       	and	r23, r23
 540:	e1 f7       	brne	.-8      	; 0x53a <strrev+0x4>
 542:	32 97       	sbiw	r30, 0x02	; 2
 544:	04 c0       	rjmp	.+8      	; 0x54e <strrev+0x18>
 546:	7c 91       	ld	r23, X
 548:	6d 93       	st	X+, r22
 54a:	70 83       	st	Z, r23
 54c:	62 91       	ld	r22, -Z
 54e:	ae 17       	cp	r26, r30
 550:	bf 07       	cpc	r27, r31
 552:	c8 f3       	brcs	.-14     	; 0x546 <strrev+0x10>
 554:	08 95       	ret

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
