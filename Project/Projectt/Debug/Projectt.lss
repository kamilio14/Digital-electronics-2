
Projectt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800300  00800300  00000786  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e39  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052e  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000336  00000000  00000000  00002943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_13>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_16>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	d7 00       	.word	0x00d7	; ????
  6a:	e7 00       	.word	0x00e7	; ????
  6c:	f7 00       	.word	0x00f7	; ????
  6e:	07 01       	movw	r0, r14
  70:	17 01       	movw	r2, r14
  72:	27 01       	movw	r4, r14
  74:	37 01       	movw	r6, r14
  76:	47 01       	movw	r8, r14

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	13 e0       	ldi	r17, 0x03	; 3
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e2 ef       	ldi	r30, 0xF2	; 242
  8c:	f4 e0       	ldi	r31, 0x04	; 4
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	23 e0       	ldi	r18, 0x03	; 3
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b3 e0       	ldi	r27, 0x03	; 3
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a3 30       	cpi	r26, 0x03	; 3
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  ae:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <GPIO_config_output>:
  b6:	fc 01       	movw	r30, r24
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <GPIO_config_output+0xe>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <GPIO_config_output+0xa>
  c8:	24 2b       	or	r18, r20
  ca:	20 83       	st	Z, r18
  cc:	08 95       	ret

000000ce <GPIO_config_input_nopull>:
  ce:	fc 01       	movw	r30, r24
  d0:	80 81       	ld	r24, Z
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_config_input_nopull+0xe>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_config_input_nopull+0xa>
  e0:	20 95       	com	r18
  e2:	82 23       	and	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	81 81       	ldd	r24, Z+1	; 0x01
  ea:	28 23       	and	r18, r24
  ec:	21 83       	std	Z+1, r18	; 0x01
  ee:	08 95       	ret

000000f0 <GPIO_write_low>:
  f0:	fc 01       	movw	r30, r24
  f2:	90 81       	ld	r25, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_write_low+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_write_low+0xa>
 102:	20 95       	com	r18
 104:	29 23       	and	r18, r25
 106:	20 83       	st	Z, r18
 108:	08 95       	ret

0000010a <GPIO_write_high>:
 10a:	fc 01       	movw	r30, r24
 10c:	40 81       	ld	r20, Z
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <GPIO_write_high+0xe>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <GPIO_write_high+0xa>
 11c:	24 2b       	or	r18, r20
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <GPIO_read>:
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_read+0xc>
 12a:	95 95       	asr	r25
 12c:	87 95       	ror	r24
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_read+0x8>
 132:	81 70       	andi	r24, 0x01	; 1
 134:	08 95       	ret

00000136 <converter>:

//function headers
void converter(int n);

void converter(int n)
{
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	60 97       	sbiw	r28, 0x10	; 16
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
	// array to store binary number
	int binaryNum[8] = {0,0,0,0,0,0,0,0};
 14e:	fe 01       	movw	r30, r28
 150:	31 96       	adiw	r30, 0x01	; 1
 152:	20 e1       	ldi	r18, 0x10	; 16
 154:	df 01       	movw	r26, r30
 156:	1d 92       	st	X+, r1
 158:	2a 95       	dec	r18
 15a:	e9 f7       	brne	.-6      	; 0x156 <converter+0x20>
	
	// counter for binary array
	int i = 0;
	//if (n == 0) i = 8; //set converter bits to zeros
	
	while (n > 0)
 15c:	18 16       	cp	r1, r24
 15e:	19 06       	cpc	r1, r25
 160:	0c f0       	brlt	.+2      	; 0x164 <converter+0x2e>
 162:	a9 c0       	rjmp	.+338    	; 0x2b6 <converter+0x180>
	{
		// storing remainder in binary array
		binaryNum[i] = n % 2;
 164:	9c 01       	movw	r18, r24
 166:	21 70       	andi	r18, 0x01	; 1
 168:	30 78       	andi	r19, 0x80	; 128
 16a:	33 23       	and	r19, r19
 16c:	34 f4       	brge	.+12     	; 0x17a <converter+0x44>
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	2e 6f       	ori	r18, 0xFE	; 254
 174:	3f 6f       	ori	r19, 0xFF	; 255
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	21 93       	st	Z+, r18
 17c:	31 93       	st	Z+, r19
		n = n / 2;
 17e:	9c 01       	movw	r18, r24
 180:	99 23       	and	r25, r25
 182:	14 f4       	brge	.+4      	; 0x188 <converter+0x52>
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	3f 4f       	sbci	r19, 0xFF	; 255
 188:	c9 01       	movw	r24, r18
 18a:	95 95       	asr	r25
 18c:	87 95       	ror	r24
	
	// counter for binary array
	int i = 0;
	//if (n == 0) i = 8; //set converter bits to zeros
	
	while (n > 0)
 18e:	18 16       	cp	r1, r24
 190:	19 06       	cpc	r1, r25
 192:	44 f3       	brlt	.-48     	; 0x164 <converter+0x2e>
 194:	90 c0       	rjmp	.+288    	; 0x2b6 <converter+0x180>
 196:	01 50       	subi	r16, 0x01	; 1
 198:	11 09       	sbc	r17, r1
 19a:	f8 01       	movw	r30, r16
 19c:	31 96       	adiw	r30, 0x01	; 1
		i++;
	}
	// printing binary array in reverse order
	for (int j = 7; j >= 0; j--)
	{
		switch(j)
 19e:	e8 30       	cpi	r30, 0x08	; 8
 1a0:	f1 05       	cpc	r31, r1
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <converter+0x70>
 1a4:	84 c0       	rjmp	.+264    	; 0x2ae <converter+0x178>
 1a6:	ec 5c       	subi	r30, 0xCC	; 204
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__tablejump2__>
		{
			case 0:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC0);
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	89 2b       	or	r24, r25
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <converter+0x8c>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 1c0:	7d c0       	rjmp	.+250    	; 0x2bc <converter+0x186>
				else GPIO_write_low(&PORTB, DAC0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 1cc:	77 c0       	rjmp	.+238    	; 0x2bc <converter+0x186>
				break;
			case 1:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC1);
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	89 2b       	or	r24, r25
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <converter+0xac>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 1e0:	da cf       	rjmp	.-76     	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 1ec:	d4 cf       	rjmp	.-88     	; 0x196 <converter+0x60>
				break;
			case 2:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC2);
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	9e 81       	ldd	r25, Y+6	; 0x06
 1f2:	89 2b       	or	r24, r25
 1f4:	31 f0       	breq	.+12     	; 0x202 <converter+0xcc>
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 200:	ca cf       	rjmp	.-108    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC2);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	85 e2       	ldi	r24, 0x25	; 37
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 20c:	c4 cf       	rjmp	.-120    	; 0x196 <converter+0x60>
				break;
			case 3:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC3);
 20e:	8f 81       	ldd	r24, Y+7	; 0x07
 210:	98 85       	ldd	r25, Y+8	; 0x08
 212:	89 2b       	or	r24, r25
 214:	31 f0       	breq	.+12     	; 0x222 <converter+0xec>
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 220:	ba cf       	rjmp	.-140    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC3);
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 22c:	b4 cf       	rjmp	.-152    	; 0x196 <converter+0x60>
				break;
			case 4:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC4);
 22e:	89 85       	ldd	r24, Y+9	; 0x09
 230:	9a 85       	ldd	r25, Y+10	; 0x0a
 232:	89 2b       	or	r24, r25
 234:	31 f0       	breq	.+12     	; 0x242 <converter+0x10c>
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 240:	aa cf       	rjmp	.-172    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC4);
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 24c:	a4 cf       	rjmp	.-184    	; 0x196 <converter+0x60>
				break;
			case 5:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC5);
 24e:	8b 85       	ldd	r24, Y+11	; 0x0b
 250:	9c 85       	ldd	r25, Y+12	; 0x0c
 252:	89 2b       	or	r24, r25
 254:	31 f0       	breq	.+12     	; 0x262 <converter+0x12c>
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	85 e2       	ldi	r24, 0x25	; 37
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 260:	9a cf       	rjmp	.-204    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC5);
 262:	65 e0       	ldi	r22, 0x05	; 5
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 26c:	94 cf       	rjmp	.-216    	; 0x196 <converter+0x60>
				break;
			case 6:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC6);
 26e:	8d 85       	ldd	r24, Y+13	; 0x0d
 270:	9e 85       	ldd	r25, Y+14	; 0x0e
 272:	89 2b       	or	r24, r25
 274:	31 f0       	breq	.+12     	; 0x282 <converter+0x14c>
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 280:	8a cf       	rjmp	.-236    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC6);
 282:	66 e0       	ldi	r22, 0x06	; 6
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 28c:	84 cf       	rjmp	.-248    	; 0x196 <converter+0x60>
				break;
			case 7:
				if(binaryNum[j]) GPIO_write_high(&PORTB, DAC7);
 28e:	8f 85       	ldd	r24, Y+15	; 0x0f
 290:	98 89       	ldd	r25, Y+16	; 0x10
 292:	89 2b       	or	r24, r25
 294:	31 f0       	breq	.+12     	; 0x2a2 <converter+0x16c>
 296:	67 e0       	ldi	r22, 0x07	; 7
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 2a0:	7a cf       	rjmp	.-268    	; 0x196 <converter+0x60>
				else GPIO_write_low(&PORTB, DAC7);
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 2ac:	74 cf       	rjmp	.-280    	; 0x196 <converter+0x60>
		binaryNum[i] = n % 2;
		n = n / 2;
		i++;
	}
	// printing binary array in reverse order
	for (int j = 7; j >= 0; j--)
 2ae:	11 23       	and	r17, r17
 2b0:	0c f0       	brlt	.+2      	; 0x2b4 <converter+0x17e>
 2b2:	71 cf       	rjmp	.-286    	; 0x196 <converter+0x60>
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <converter+0x186>

//function headers
void converter(int n);

void converter(int n)
{
 2b6:	06 e0       	ldi	r16, 0x06	; 6
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	6f cf       	rjmp	.-290    	; 0x19a <converter+0x64>
				else GPIO_write_low(&PORTB, DAC7);
				break;
			default:;
		}
	}
}
 2bc:	60 96       	adiw	r28, 0x10	; 16
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <main>:

int main(void)
{	
    // 4x3 keyboard input configuration
    GPIO_config_input_nopull(&DDRC, KEYPAD0);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	87 e2       	ldi	r24, 0x27	; 39
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	87 e2       	ldi	r24, 0x27	; 39
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD2);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	87 e2       	ldi	r24, 0x27	; 39
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    // 4x3 keyboard output configuration
    GPIO_config_output(&DDRC, KEYPAD3);
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	87 e2       	ldi	r24, 0x27	; 39
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD4);
 2fa:	64 e0       	ldi	r22, 0x04	; 4
 2fc:	87 e2       	ldi	r24, 0x27	; 39
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD5);
 304:	65 e0       	ldi	r22, 0x05	; 5
 306:	87 e2       	ldi	r24, 0x27	; 39
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD6);
 30e:	66 e0       	ldi	r22, 0x06	; 6
 310:	87 e2       	ldi	r24, 0x27	; 39
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>

    // DAC output configuration
    GPIO_config_output(&DDRB, DAC0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	84 e2       	ldi	r24, 0x24	; 36
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC1);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	84 e2       	ldi	r24, 0x24	; 36
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC2);
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	84 e2       	ldi	r24, 0x24	; 36
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC3);
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	84 e2       	ldi	r24, 0x24	; 36
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC4);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC5);
 34a:	65 e0       	ldi	r22, 0x05	; 5
 34c:	84 e2       	ldi	r24, 0x24	; 36
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC6);
 354:	66 e0       	ldi	r22, 0x06	; 6
 356:	84 e2       	ldi	r24, 0x24	; 36
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC7);
 35e:	67 e0       	ldi	r22, 0x07	; 7
 360:	84 e2       	ldi	r24, 0x24	; 36
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    // Write to LCD display
  

    // Configuration of 8-bit Timer/Counter0 for signal generator
    // Overflow interrupt every 128 us
    TIM0_overflow_1ms();
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	85 bd       	out	0x25, r24	; 37
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	83 60       	ori	r24, 0x03	; 3
 372:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 374:	ee e6       	ldi	r30, 0x6E	; 110
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	80 83       	st	Z, r24
	
    // Configuration of 16-bit Timer/Counter0 for signal generator
    // Overflow interrupt every 262 us
    TIM1_overflow_262ms();
 37e:	e1 e8       	ldi	r30, 0x81	; 129
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8b 7f       	andi	r24, 0xFB	; 251
 386:	80 83       	st	Z, r24
 388:	80 81       	ld	r24, Z
 38a:	83 60       	ori	r24, 0x03	; 3
 38c:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 38e:	ef e6       	ldi	r30, 0x6F	; 111
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	81 60       	ori	r24, 0x01	; 1
 396:	80 83       	st	Z, r24
	
    // Initialization of UART to asynchronous, 8N1, 9600
  
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 398:	78 94       	sei
 39a:	ff cf       	rjmp	.-2      	; 0x39a <main+0xc8>

0000039c <__vector_13>:
}

/* Interrupt service routines ----------------------------------------*/

ISR(TIMER1_OVF_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	// 4x3 keypad service
	GPIO_write_high(&PORTC, KEYPAD3);
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	88 e2       	ldi	r24, 0x28	; 40
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
	GPIO_write_low(&PORTC, KEYPAD4);
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	88 e2       	ldi	r24, 0x28	; 40
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	GPIO_write_low(&PORTC, KEYPAD5);
 3d2:	65 e0       	ldi	r22, 0x05	; 5
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	GPIO_write_low(&PORTC, KEYPAD6);
 3dc:	66 e0       	ldi	r22, 0x06	; 6
 3de:	88 e2       	ldi	r24, 0x28	; 40
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	if (GPIO_read(&PINC, KEYPAD0) == 1)     
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	86 e2       	ldi	r24, 0x26	; 38
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	31 f4       	brne	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
	{keypad = 1; counter=0;}
 3f4:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 3f8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter+0x1>
 3fc:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter>
	if (GPIO_read(&PINC, KEYPAD1) == 1)     
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	86 e2       	ldi	r24, 0x26	; 38
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	39 f4       	brne	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{keypad = 2; counter=0;}
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 414:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter+0x1>
 418:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter>
	if (GPIO_read(&PINC, KEYPAD2) == 1)
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	86 e2       	ldi	r24, 0x26	; 38
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	39 f4       	brne	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{keypad = 3; counter=0;}
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
 430:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter+0x1>
 434:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter>
	


	
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_16>:
// Interrupts from Timer/Counter0 can generate 6 various signals
ISR(TIMER0_OVF_vect)
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
   if (keypad == 1)
 47c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	f1 f4       	brne	.+60     	; 0x4c0 <__vector_16+0x66>
    {
		converter(sine[counter]);
 484:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <counter>
 488:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <counter+0x1>
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	e0 50       	subi	r30, 0x00	; 0
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	0e 94 9b 00 	call	0x136	; 0x136 <converter>
		counter++;
 49c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <counter>
 4a0:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <counter+0x1>
 4a4:	01 96       	adiw	r24, 0x01	; 1
	   if (counter > 256) counter = 0;
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	92 07       	cpc	r25, r18
 4ac:	28 f4       	brcc	.+10     	; 0x4b8 <__vector_16+0x5e>
ISR(TIMER0_OVF_vect)
{
   if (keypad == 1)
    {
		converter(sine[counter]);
		counter++;
 4ae:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <counter+0x1>
 4b2:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <counter>
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__vector_16+0x66>
	   if (counter > 256) counter = 0;
 4b8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter+0x1>
 4bc:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter>
	}
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__tablejump2__>:
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	05 90       	lpm	r0, Z+
 4e8:	f4 91       	lpm	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	09 94       	ijmp

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
