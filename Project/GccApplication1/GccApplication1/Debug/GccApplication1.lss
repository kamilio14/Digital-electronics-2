
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005a6  00800100  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  008006a6  008006a6  00001368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002653  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae6  00000000  00000000  00003b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001089  00000000  00000000  00004669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  000056f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  00005a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce2  00000000  00000000  000060fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_13>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_16>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__vector_18>
  4c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_19>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	7a 01       	movw	r14, r20
  6a:	8a 01       	movw	r16, r20
  6c:	9a 01       	movw	r18, r20
  6e:	aa 01       	movw	r20, r20
  70:	ba 01       	movw	r22, r20
  72:	ca 01       	movw	r24, r20
  74:	da 01       	movw	r26, r20
  76:	ea 01       	movw	r28, r20

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	16 e0       	ldi	r17, 0x06	; 6
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ee e2       	ldi	r30, 0x2E	; 46
  8c:	fd e0       	ldi	r31, 0x0D	; 13
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 3a       	cpi	r26, 0xA6	; 166
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	27 e0       	ldi	r18, 0x07	; 7
  9c:	a6 ea       	ldi	r26, 0xA6	; 166
  9e:	b6 e0       	ldi	r27, 0x06	; 6
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ad 30       	cpi	r26, 0x0D	; 13
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  ae:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <GPIO_config_output>:
  b6:	fc 01       	movw	r30, r24
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <GPIO_config_output+0xe>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <GPIO_config_output+0xa>
  c8:	24 2b       	or	r18, r20
  ca:	20 83       	st	Z, r18
  cc:	08 95       	ret

000000ce <GPIO_config_input_nopull>:
  ce:	fc 01       	movw	r30, r24
  d0:	80 81       	ld	r24, Z
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_config_input_nopull+0xe>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_config_input_nopull+0xa>
  e0:	20 95       	com	r18
  e2:	82 23       	and	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	81 81       	ldd	r24, Z+1	; 0x01
  ea:	28 23       	and	r18, r24
  ec:	21 83       	std	Z+1, r18	; 0x01
  ee:	08 95       	ret

000000f0 <GPIO_write_low>:
  f0:	fc 01       	movw	r30, r24
  f2:	90 81       	ld	r25, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_write_low+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_write_low+0xa>
 102:	20 95       	com	r18
 104:	29 23       	and	r18, r25
 106:	20 83       	st	Z, r18
 108:	08 95       	ret

0000010a <GPIO_write_high>:
 10a:	fc 01       	movw	r30, r24
 10c:	40 81       	ld	r20, Z
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <GPIO_write_high+0xe>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <GPIO_write_high+0xa>
 11c:	24 2b       	or	r18, r20
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <GPIO_read>:
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_read+0xc>
 12a:	95 95       	asr	r25
 12c:	87 95       	ror	r24
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_read+0x8>
 132:	81 70       	andi	r24, 0x01	; 1
 134:	08 95       	ret

00000136 <toggle_e>:
 136:	5b 9a       	sbi	0x0b, 3	; 11
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <toggle_e+0x4>
 13e:	00 00       	nop
 140:	5b 98       	cbi	0x0b, 3	; 11
 142:	08 95       	ret

00000144 <lcd_write>:
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
 148:	66 23       	and	r22, r22
 14a:	11 f0       	breq	.+4      	; 0x150 <lcd_write+0xc>
 14c:	5a 9a       	sbi	0x0b, 2	; 11
 14e:	01 c0       	rjmp	.+2      	; 0x152 <lcd_write+0xe>
 150:	5a 98       	cbi	0x0b, 2	; 11
 152:	54 9a       	sbi	0x0a, 4	; 10
 154:	55 9a       	sbi	0x0a, 5	; 10
 156:	56 9a       	sbi	0x0a, 6	; 10
 158:	57 9a       	sbi	0x0a, 7	; 10
 15a:	5f 98       	cbi	0x0b, 7	; 11
 15c:	5e 98       	cbi	0x0b, 6	; 11
 15e:	5d 98       	cbi	0x0b, 5	; 11
 160:	5c 98       	cbi	0x0b, 4	; 11
 162:	cc 23       	and	r28, r28
 164:	0c f4       	brge	.+2      	; 0x168 <lcd_write+0x24>
 166:	5f 9a       	sbi	0x0b, 7	; 11
 168:	c6 fd       	sbrc	r28, 6
 16a:	5e 9a       	sbi	0x0b, 6	; 11
 16c:	c5 fd       	sbrc	r28, 5
 16e:	5d 9a       	sbi	0x0b, 5	; 11
 170:	c4 fd       	sbrc	r28, 4
 172:	5c 9a       	sbi	0x0b, 4	; 11
 174:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 178:	5f 98       	cbi	0x0b, 7	; 11
 17a:	5e 98       	cbi	0x0b, 6	; 11
 17c:	5d 98       	cbi	0x0b, 5	; 11
 17e:	5c 98       	cbi	0x0b, 4	; 11
 180:	c3 fd       	sbrc	r28, 3
 182:	5f 9a       	sbi	0x0b, 7	; 11
 184:	c2 fd       	sbrc	r28, 2
 186:	5e 9a       	sbi	0x0b, 6	; 11
 188:	c1 fd       	sbrc	r28, 1
 18a:	5d 9a       	sbi	0x0b, 5	; 11
 18c:	c0 fd       	sbrc	r28, 0
 18e:	5c 9a       	sbi	0x0b, 4	; 11
 190:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 194:	5c 9a       	sbi	0x0b, 4	; 11
 196:	5d 9a       	sbi	0x0b, 5	; 11
 198:	5e 9a       	sbi	0x0b, 6	; 11
 19a:	5f 9a       	sbi	0x0b, 7	; 11
 19c:	87 eb       	ldi	r24, 0xB7	; 183
 19e:	9b e0       	ldi	r25, 0x0B	; 11
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write+0x5c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write+0x62>
 1a6:	00 00       	nop
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_command>:
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write>
 1b2:	08 95       	ret

000001b4 <lcd_gotoxy>:
 1b4:	61 11       	cpse	r22, r1
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <lcd_gotoxy+0xc>
 1b8:	80 58       	subi	r24, 0x80	; 128
 1ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 1be:	08 95       	ret
 1c0:	80 54       	subi	r24, 0x40	; 64
 1c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 1c6:	08 95       	ret

000001c8 <lcd_clrscr>:
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 1ce:	08 95       	ret

000001d0 <lcd_putc>:
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write>
 1d6:	08 95       	ret

000001d8 <lcd_puts>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	88 23       	and	r24, r24
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <lcd_puts+0x1a>
 1e8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_putc>
 1ec:	89 91       	ld	r24, Y+
 1ee:	81 11       	cpse	r24, r1
 1f0:	fb cf       	rjmp	.-10     	; 0x1e8 <lcd_puts+0x10>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcd_init>:
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24
 1fc:	52 9a       	sbi	0x0a, 2	; 10
 1fe:	55 9a       	sbi	0x0a, 5	; 10
 200:	53 9a       	sbi	0x0a, 3	; 10
 202:	54 9a       	sbi	0x0a, 4	; 10
 204:	55 9a       	sbi	0x0a, 5	; 10
 206:	56 9a       	sbi	0x0a, 6	; 10
 208:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	99 ef       	ldi	r25, 0xF9	; 249
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x16>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x1c>
 214:	00 00       	nop
 216:	5d 9a       	sbi	0x0b, 5	; 11
 218:	5c 9a       	sbi	0x0b, 4	; 11
 21a:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 21e:	8f e1       	ldi	r24, 0x1F	; 31
 220:	9e e4       	ldi	r25, 0x4E	; 78
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x2a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x30>
 228:	00 00       	nop
 22a:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x3a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x40>
 238:	00 00       	nop
 23a:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x4a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x50>
 248:	00 00       	nop
 24a:	5c 98       	cbi	0x0b, 4	; 11
 24c:	0e 94 9b 00 	call	0x136	; 0x136 <toggle_e>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_init+0x5c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_init+0x62>
 25a:	00 00       	nop
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 268:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_clrscr>
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 272:	8c 2f       	mov	r24, r28
 274:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_command>
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <converter>:
6,23,49,83,120,};
//function headers
void converter(int n);

void converter(int n)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	60 97       	sbiw	r28, 0x10	; 16
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
	// array to store binary number
	int binaryNum[8] = {0,0,0,0,0,0,0,0};
 294:	fe 01       	movw	r30, r28
 296:	31 96       	adiw	r30, 0x01	; 1
 298:	20 e1       	ldi	r18, 0x10	; 16
 29a:	df 01       	movw	r26, r30
 29c:	1d 92       	st	X+, r1
 29e:	2a 95       	dec	r18
 2a0:	e9 f7       	brne	.-6      	; 0x29c <converter+0x20>
	
	// counter for binary array
	int i = 0;
	//if (n == 0) i = 8; //set converter bits to zeros
	
	while (n > 0)
 2a2:	18 16       	cp	r1, r24
 2a4:	19 06       	cpc	r1, r25
 2a6:	0c f0       	brlt	.+2      	; 0x2aa <converter+0x2e>
 2a8:	a9 c0       	rjmp	.+338    	; 0x3fc <converter+0x180>
	{
		// storing remainder in binary array
		binaryNum[i] = n % 2;
 2aa:	9c 01       	movw	r18, r24
 2ac:	21 70       	andi	r18, 0x01	; 1
 2ae:	30 78       	andi	r19, 0x80	; 128
 2b0:	33 23       	and	r19, r19
 2b2:	34 f4       	brge	.+12     	; 0x2c0 <converter+0x44>
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	31 09       	sbc	r19, r1
 2b8:	2e 6f       	ori	r18, 0xFE	; 254
 2ba:	3f 6f       	ori	r19, 0xFF	; 255
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	21 93       	st	Z+, r18
 2c2:	31 93       	st	Z+, r19
		n = n / 2;
 2c4:	9c 01       	movw	r18, r24
 2c6:	99 23       	and	r25, r25
 2c8:	14 f4       	brge	.+4      	; 0x2ce <converter+0x52>
 2ca:	2f 5f       	subi	r18, 0xFF	; 255
 2cc:	3f 4f       	sbci	r19, 0xFF	; 255
 2ce:	c9 01       	movw	r24, r18
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
	
	// counter for binary array
	int i = 0;
	//if (n == 0) i = 8; //set converter bits to zeros
	
	while (n > 0)
 2d4:	18 16       	cp	r1, r24
 2d6:	19 06       	cpc	r1, r25
 2d8:	44 f3       	brlt	.-48     	; 0x2aa <converter+0x2e>
 2da:	90 c0       	rjmp	.+288    	; 0x3fc <converter+0x180>
 2dc:	01 50       	subi	r16, 0x01	; 1
 2de:	11 09       	sbc	r17, r1
 2e0:	f8 01       	movw	r30, r16
 2e2:	31 96       	adiw	r30, 0x01	; 1
		i++;
	}
	// printing binary array in reverse order
	for (int j = 7; j >= 0; j--)
	{
		switch(j)
 2e4:	e8 30       	cpi	r30, 0x08	; 8
 2e6:	f1 05       	cpc	r31, r1
 2e8:	08 f0       	brcs	.+2      	; 0x2ec <converter+0x70>
 2ea:	84 c0       	rjmp	.+264    	; 0x3f4 <converter+0x178>
 2ec:	ec 5c       	subi	r30, 0xCC	; 204
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__tablejump2__>
		{
			case 0:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC0);
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	9a 81       	ldd	r25, Y+2	; 0x02
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	31 f4       	brne	.+12     	; 0x308 <converter+0x8c>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	85 e2       	ldi	r24, 0x25	; 37
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 306:	7d c0       	rjmp	.+250    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			else GPIO_write_low(&PORTB, DAC0);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	85 e2       	ldi	r24, 0x25	; 37
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 312:	77 c0       	rjmp	.+238    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			break;
			case 1:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC1);
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	9c 81       	ldd	r25, Y+4	; 0x04
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	31 f4       	brne	.+12     	; 0x328 <converter+0xac>
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	85 e2       	ldi	r24, 0x25	; 37
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 326:	da cf       	rjmp	.-76     	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	85 e2       	ldi	r24, 0x25	; 37
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 332:	d4 cf       	rjmp	.-88     	; 0x2dc <converter+0x60>
			break;
			case 2:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC2);
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	9e 81       	ldd	r25, Y+6	; 0x06
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	31 f4       	brne	.+12     	; 0x348 <converter+0xcc>
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	85 e2       	ldi	r24, 0x25	; 37
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 346:	ca cf       	rjmp	.-108    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC2);
 348:	62 e0       	ldi	r22, 0x02	; 2
 34a:	85 e2       	ldi	r24, 0x25	; 37
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 352:	c4 cf       	rjmp	.-120    	; 0x2dc <converter+0x60>
			break;
			case 3:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC3);
 354:	8f 81       	ldd	r24, Y+7	; 0x07
 356:	98 85       	ldd	r25, Y+8	; 0x08
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	31 f4       	brne	.+12     	; 0x368 <converter+0xec>
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	85 e2       	ldi	r24, 0x25	; 37
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 366:	ba cf       	rjmp	.-140    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC3);
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	85 e2       	ldi	r24, 0x25	; 37
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 372:	b4 cf       	rjmp	.-152    	; 0x2dc <converter+0x60>
			break;
			case 4:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC4);
 374:	89 85       	ldd	r24, Y+9	; 0x09
 376:	9a 85       	ldd	r25, Y+10	; 0x0a
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	31 f4       	brne	.+12     	; 0x388 <converter+0x10c>
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	85 e2       	ldi	r24, 0x25	; 37
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 386:	aa cf       	rjmp	.-172    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC4);
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	85 e2       	ldi	r24, 0x25	; 37
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 392:	a4 cf       	rjmp	.-184    	; 0x2dc <converter+0x60>
			break;
			case 5:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC5);
 394:	8b 85       	ldd	r24, Y+11	; 0x0b
 396:	9c 85       	ldd	r25, Y+12	; 0x0c
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	31 f4       	brne	.+12     	; 0x3a8 <converter+0x12c>
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	85 e2       	ldi	r24, 0x25	; 37
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 3a6:	9a cf       	rjmp	.-204    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC5);
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	85 e2       	ldi	r24, 0x25	; 37
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 3b2:	94 cf       	rjmp	.-216    	; 0x2dc <converter+0x60>
			break;
			case 6:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC6);
 3b4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <converter+0x14c>
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 3c6:	8a cf       	rjmp	.-236    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC6);
 3c8:	66 e0       	ldi	r22, 0x06	; 6
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 3d2:	84 cf       	rjmp	.-248    	; 0x2dc <converter+0x60>
			break;
			case 7:
			if(binaryNum[j]==1) GPIO_write_high(&PORTB, DAC7);
 3d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 3d6:	98 89       	ldd	r25, Y+16	; 0x10
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	31 f4       	brne	.+12     	; 0x3e8 <converter+0x16c>
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	85 e2       	ldi	r24, 0x25	; 37
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
 3e6:	7a cf       	rjmp	.-268    	; 0x2dc <converter+0x60>
			else GPIO_write_low(&PORTB, DAC7);
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
 3f2:	74 cf       	rjmp	.-280    	; 0x2dc <converter+0x60>
		binaryNum[i] = n % 2;
		n = n / 2;
		i++;
	}
	// printing binary array in reverse order
	for (int j = 7; j >= 0; j--)
 3f4:	11 23       	and	r17, r17
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <converter+0x17e>
 3f8:	71 cf       	rjmp	.-286    	; 0x2dc <converter+0x60>
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
6,23,49,83,120,};
//function headers
void converter(int n);

void converter(int n)
{
 3fc:	06 e0       	ldi	r16, 0x06	; 6
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	6f cf       	rjmp	.-290    	; 0x2e0 <converter+0x64>
			else GPIO_write_low(&PORTB, DAC7);
			break;
			default:;
		}
	}
}
 402:	60 96       	adiw	r28, 0x10	; 16
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <main>:

int main(void)
{	
    // 4x3 keyboard input configuration
    GPIO_config_input_nopull(&DDRC, KEYPAD0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	87 e2       	ldi	r24, 0x27	; 39
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD1);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	87 e2       	ldi	r24, 0x27	; 39
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD2);
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	87 e2       	ldi	r24, 0x27	; 39
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 67 00 	call	0xce	; 0xce <GPIO_config_input_nopull>
    // 4x3 keyboard output configuration
    GPIO_config_output(&DDRC, KEYPAD3);
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	87 e2       	ldi	r24, 0x27	; 39
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD4);
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	87 e2       	ldi	r24, 0x27	; 39
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD5);
 44a:	65 e0       	ldi	r22, 0x05	; 5
 44c:	87 e2       	ldi	r24, 0x27	; 39
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD6);
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	87 e2       	ldi	r24, 0x27	; 39
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>

    // DAC output configuration
    GPIO_config_output(&DDRB, DAC0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	84 e2       	ldi	r24, 0x24	; 36
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	84 e2       	ldi	r24, 0x24	; 36
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC2);
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	84 e2       	ldi	r24, 0x24	; 36
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC3);
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	84 e2       	ldi	r24, 0x24	; 36
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC4);
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	84 e2       	ldi	r24, 0x24	; 36
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC5);
 490:	65 e0       	ldi	r22, 0x05	; 5
 492:	84 e2       	ldi	r24, 0x24	; 36
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC6);
 49a:	66 e0       	ldi	r22, 0x06	; 6
 49c:	84 e2       	ldi	r24, 0x24	; 36
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC7);
 4a4:	67 e0       	ldi	r22, 0x07	; 7
 4a6:	84 e2       	ldi	r24, 0x24	; 36
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <GPIO_config_output>

    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 4ae:	8c e0       	ldi	r24, 0x0C	; 12
 4b0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_init>

    // Write to LCD display
    lcd_gotoxy(0, 0);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
    lcd_puts("OUTPUT SIGNAL");
 4bc:	83 e1       	ldi	r24, 0x13	; 19
 4be:	94 e0       	ldi	r25, 0x04	; 4
 4c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>

    // Configuration of 8-bit Timer/Counter0 for signal generator
    // Overflow interrupt every 128 us
    TIM0_overflow_1ms();
 4c4:	85 b5       	in	r24, 0x25	; 37
 4c6:	8b 7f       	andi	r24, 0xFB	; 251
 4c8:	85 bd       	out	0x25, r24	; 37
 4ca:	85 b5       	in	r24, 0x25	; 37
 4cc:	83 60       	ori	r24, 0x03	; 3
 4ce:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 4d0:	ee e6       	ldi	r30, 0x6E	; 110
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	81 60       	ori	r24, 0x01	; 1
 4d8:	80 83       	st	Z, r24
	
    // Configuration of 16-bit Timer/Counter1 for signal generator
    // Overflow interrupt every 262 us
    TIM1_overflow_262ms();
 4da:	e1 e8       	ldi	r30, 0x81	; 129
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	8b 7f       	andi	r24, 0xFB	; 251
 4e2:	80 83       	st	Z, r24
 4e4:	80 81       	ld	r24, Z
 4e6:	83 60       	ori	r24, 0x03	; 3
 4e8:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 4ea:	ef e6       	ldi	r30, 0x6F	; 111
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	80 83       	st	Z, r24
	
    // Initialization of UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 4f4:	87 e6       	ldi	r24, 0x67	; 103
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 52 06 	call	0xca4	; 0xca4 <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 4fc:	78 94       	sei
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <main+0xe6>

00000500 <__vector_16>:

/* Interrupt service routines ----------------------------------------*/

// Interrupts from Timer/Counter0 can generate 6 various signals
ISR(TIMER0_OVF_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	// Sine
	if (keypad == 1)
 522:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	71 f4       	brne	.+28     	; 0x546 <__vector_16+0x46>
	{
		converter(sine[counter]);
 52a:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <counter>
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	ec 5e       	subi	r30, 0xEC	; 236
 532:	fc 4f       	sbci	r31, 0xFC	; 252
 534:	80 81       	ld	r24, Z
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 3e 01 	call	0x27c	; 0x27c <converter>
		counter++;
 53c:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
		if (counter > 255) counter = 0;
	}
	
	// Triangle
	if (keypad ==2)
 546:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	71 f4       	brne	.+28     	; 0x56a <__vector_16+0x6a>
	{
		converter(triangle[counter]);
 54e:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <counter>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ec 5e       	subi	r30, 0xEC	; 236
 556:	fd 4f       	sbci	r31, 0xFD	; 253
 558:	80 81       	ld	r24, Z
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 3e 01 	call	0x27c	; 0x27c <converter>
		counter++;
 560:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
		if (counter > 255) counter = 0;
	}
	
	// Exponential wave
	if (keypad == 3)
 56a:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	71 f4       	brne	.+28     	; 0x58e <__vector_16+0x8e>
	{
		converter(decay[counter]);
 572:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <counter>
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ec 5e       	subi	r30, 0xEC	; 236
 57a:	fe 4f       	sbci	r31, 0xFE	; 254
 57c:	80 81       	ld	r24, Z
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 3e 01 	call	0x27c	; 0x27c <converter>
		counter++;
 584:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 588:	8f 5f       	subi	r24, 0xFF	; 255
 58a:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
		if (counter > 255) counter = 0;
	}
	
	// Square
	if (keypad == 4)
 58e:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 592:	84 30       	cpi	r24, 0x04	; 4
 594:	09 f0       	breq	.+2      	; 0x598 <__vector_16+0x98>
 596:	68 c0       	rjmp	.+208    	; 0x668 <__vector_16+0x168>
	{
		if (counter == 0)
 598:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 59c:	81 11       	cpse	r24, r1
 59e:	28 c0       	rjmp	.+80     	; 0x5f0 <__vector_16+0xf0>
		{
			GPIO_write_low(&PORTB, DAC0);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	85 e2       	ldi	r24, 0x25	; 37
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC1);
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	85 e2       	ldi	r24, 0x25	; 37
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC2);
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	85 e2       	ldi	r24, 0x25	; 37
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC3);
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	85 e2       	ldi	r24, 0x25	; 37
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_high(&PORTB, DAC4);
 5c8:	64 e0       	ldi	r22, 0x04	; 4
 5ca:	85 e2       	ldi	r24, 0x25	; 37
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC5);
 5d2:	65 e0       	ldi	r22, 0x05	; 5
 5d4:	85 e2       	ldi	r24, 0x25	; 37
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC6);
 5dc:	66 e0       	ldi	r22, 0x06	; 6
 5de:	85 e2       	ldi	r24, 0x25	; 37
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC7);
 5e6:	67 e0       	ldi	r22, 0x07	; 7
 5e8:	85 e2       	ldi	r24, 0x25	; 37
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
		}
		counter++;
 5f0:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
		if (counter == 128)
 5fa:	80 38       	cpi	r24, 0x80	; 128
 5fc:	41 f5       	brne	.+80     	; 0x64e <__vector_16+0x14e>
		{
			GPIO_write_low(&PORTB, DAC0);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	85 e2       	ldi	r24, 0x25	; 37
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC1);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	85 e2       	ldi	r24, 0x25	; 37
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC2);
 612:	62 e0       	ldi	r22, 0x02	; 2
 614:	85 e2       	ldi	r24, 0x25	; 37
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC3);
 61c:	63 e0       	ldi	r22, 0x03	; 3
 61e:	85 e2       	ldi	r24, 0x25	; 37
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC4);
 626:	64 e0       	ldi	r22, 0x04	; 4
 628:	85 e2       	ldi	r24, 0x25	; 37
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC5);
 630:	65 e0       	ldi	r22, 0x05	; 5
 632:	85 e2       	ldi	r24, 0x25	; 37
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC6);
 63a:	66 e0       	ldi	r22, 0x06	; 6
 63c:	85 e2       	ldi	r24, 0x25	; 37
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC7);
 644:	67 e0       	ldi	r22, 0x07	; 7
 646:	85 e2       	ldi	r24, 0x25	; 37
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
		}
		if (counter == 255) counter = 0;
 64e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 652:	8f 3f       	cpi	r24, 0xFF	; 255
 654:	09 f0       	breq	.+2      	; 0x658 <__vector_16+0x158>
 656:	87 c0       	rjmp	.+270    	; 0x766 <__vector_16+0x266>
 658:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
		
	}
	// Dirac
	if (keypad == 5)
 65c:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 660:	85 30       	cpi	r24, 0x05	; 5
 662:	09 f0       	breq	.+2      	; 0x666 <__vector_16+0x166>
 664:	68 c0       	rjmp	.+208    	; 0x736 <__vector_16+0x236>
 666:	36 c0       	rjmp	.+108    	; 0x6d4 <__vector_16+0x1d4>
 668:	85 30       	cpi	r24, 0x05	; 5
 66a:	09 f0       	breq	.+2      	; 0x66e <__vector_16+0x16e>
 66c:	64 c0       	rjmp	.+200    	; 0x736 <__vector_16+0x236>
	{
		if (counter == 255)
 66e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 672:	8f 3f       	cpi	r24, 0xFF	; 255
 674:	19 f4       	brne	.+6      	; 0x67c <__vector_16+0x17c>
		{
			counter = 0;
 676:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
 67a:	58 c0       	rjmp	.+176    	; 0x72c <__vector_16+0x22c>
		}
		if (counter == 50)
 67c:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 680:	82 33       	cpi	r24, 0x32	; 50
 682:	41 f5       	brne	.+80     	; 0x6d4 <__vector_16+0x1d4>
		{
			GPIO_write_low(&PORTB, DAC0);
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	85 e2       	ldi	r24, 0x25	; 37
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC1);
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	85 e2       	ldi	r24, 0x25	; 37
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC2);
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	85 e2       	ldi	r24, 0x25	; 37
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC3);
 6a2:	63 e0       	ldi	r22, 0x03	; 3
 6a4:	85 e2       	ldi	r24, 0x25	; 37
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_high(&PORTB, DAC4);
 6ac:	64 e0       	ldi	r22, 0x04	; 4
 6ae:	85 e2       	ldi	r24, 0x25	; 37
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC5);
 6b6:	65 e0       	ldi	r22, 0x05	; 5
 6b8:	85 e2       	ldi	r24, 0x25	; 37
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC6);
 6c0:	66 e0       	ldi	r22, 0x06	; 6
 6c2:	85 e2       	ldi	r24, 0x25	; 37
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
			GPIO_write_high(&PORTB, DAC7);
 6ca:	67 e0       	ldi	r22, 0x07	; 7
 6cc:	85 e2       	ldi	r24, 0x25	; 37
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
		}
		if (counter == 55)
 6d4:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 6d8:	87 33       	cpi	r24, 0x37	; 55
 6da:	41 f5       	brne	.+80     	; 0x72c <__vector_16+0x22c>
		{
			GPIO_write_low(&PORTB, DAC0);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	85 e2       	ldi	r24, 0x25	; 37
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC1);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	85 e2       	ldi	r24, 0x25	; 37
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC2);
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	85 e2       	ldi	r24, 0x25	; 37
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC3);
 6fa:	63 e0       	ldi	r22, 0x03	; 3
 6fc:	85 e2       	ldi	r24, 0x25	; 37
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC4);
 704:	64 e0       	ldi	r22, 0x04	; 4
 706:	85 e2       	ldi	r24, 0x25	; 37
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC5);
 70e:	65 e0       	ldi	r22, 0x05	; 5
 710:	85 e2       	ldi	r24, 0x25	; 37
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC6);
 718:	66 e0       	ldi	r22, 0x06	; 6
 71a:	85 e2       	ldi	r24, 0x25	; 37
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
			GPIO_write_low(&PORTB, DAC7);
 722:	67 e0       	ldi	r22, 0x07	; 7
 724:	85 e2       	ldi	r24, 0x25	; 37
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
		}
		counter++;
 72c:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
	}
	
	// Noise
	if (keypad == 6)
 736:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 73a:	86 30       	cpi	r24, 0x06	; 6
 73c:	c9 f4       	brne	.+50     	; 0x770 <__vector_16+0x270>
	{
		converter(sinn[counter]);
 73e:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <counter>
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	e0 50       	subi	r30, 0x00	; 0
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	80 81       	ld	r24, Z
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 3e 01 	call	0x27c	; 0x27c <converter>
		counter++;
 750:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <counter>
 754:	8f 5f       	subi	r24, 0xFF	; 255
		if (counter > 20) counter = 0;
 756:	85 31       	cpi	r24, 0x15	; 21
 758:	18 f4       	brcc	.+6      	; 0x760 <__vector_16+0x260>
	
	// Noise
	if (keypad == 6)
	{
		converter(sinn[counter]);
		counter++;
 75a:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <counter>
 75e:	08 c0       	rjmp	.+16     	; 0x770 <__vector_16+0x270>
		if (counter > 20) counter = 0;
 760:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
	}
}
 764:	05 c0       	rjmp	.+10     	; 0x770 <__vector_16+0x270>
		}
		if (counter == 255) counter = 0;
		
	}
	// Dirac
	if (keypad == 5)
 766:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 76a:	85 30       	cpi	r24, 0x05	; 5
 76c:	21 f7       	brne	.-56     	; 0x736 <__vector_16+0x236>
 76e:	86 cf       	rjmp	.-244    	; 0x67c <__vector_16+0x17c>
	{
		converter(sinn[counter]);
		counter++;
		if (counter > 20) counter = 0;
	}
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <__vector_13>:

// Interrupts from Timer/Counter1 are keypad drivers
ISR(TIMER1_OVF_vect)
{
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
    // Keypad first row
    GPIO_write_high(&PORTC, KEYPAD3);
 7b4:	63 e0       	ldi	r22, 0x03	; 3
 7b6:	88 e2       	ldi	r24, 0x28	; 40
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD4);
 7be:	64 e0       	ldi	r22, 0x04	; 4
 7c0:	88 e2       	ldi	r24, 0x28	; 40
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD5);
 7c8:	65 e0       	ldi	r22, 0x05	; 5
 7ca:	88 e2       	ldi	r24, 0x28	; 40
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD6);
 7d2:	66 e0       	ldi	r22, 0x06	; 6
 7d4:	88 e2       	ldi	r24, 0x28	; 40
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	86 e2       	ldi	r24, 0x26	; 38
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <__vector_13+0x60>
    {keypad = 1; counter=0;}
 7ea:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 7ee:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	86 e2       	ldi	r24, 0x26	; 38
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 7fc:	81 30       	cpi	r24, 0x01	; 1
 7fe:	29 f4       	brne	.+10     	; 0x80a <__vector_13+0x78>
    {keypad = 2; counter=0;}
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 806:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	86 e2       	ldi	r24, 0x26	; 38
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	29 f4       	brne	.+10     	; 0x822 <__vector_13+0x90>
    {keypad = 3; counter=0;}
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 81e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
		
    // Keypad second row
    GPIO_write_low(&PORTC, KEYPAD3);
 822:	63 e0       	ldi	r22, 0x03	; 3
 824:	88 e2       	ldi	r24, 0x28	; 40
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_high(&PORTC, KEYPAD4);
 82c:	64 e0       	ldi	r22, 0x04	; 4
 82e:	88 e2       	ldi	r24, 0x28	; 40
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD5);
 836:	65 e0       	ldi	r22, 0x05	; 5
 838:	88 e2       	ldi	r24, 0x28	; 40
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD6);
 840:	66 e0       	ldi	r22, 0x06	; 6
 842:	88 e2       	ldi	r24, 0x28	; 40
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	86 e2       	ldi	r24, 0x26	; 38
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	29 f4       	brne	.+10     	; 0x862 <__vector_13+0xd0>
    {keypad = 4; counter=0;}
 858:	84 e0       	ldi	r24, 0x04	; 4
 85a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 85e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)
 862:	61 e0       	ldi	r22, 0x01	; 1
 864:	86 e2       	ldi	r24, 0x26	; 38
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	29 f4       	brne	.+10     	; 0x87a <__vector_13+0xe8>
    {keypad = 5; counter=0;}
 870:	85 e0       	ldi	r24, 0x05	; 5
 872:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 876:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	86 e2       	ldi	r24, 0x26	; 38
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	29 f4       	brne	.+10     	; 0x892 <__vector_13+0x100>
    {keypad = 6; counter=0;}
 888:	86 e0       	ldi	r24, 0x06	; 6
 88a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 88e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
		
    // Keypad third row
    GPIO_write_low(&PORTC, KEYPAD3);
 892:	63 e0       	ldi	r22, 0x03	; 3
 894:	88 e2       	ldi	r24, 0x28	; 40
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD4);
 89c:	64 e0       	ldi	r22, 0x04	; 4
 89e:	88 e2       	ldi	r24, 0x28	; 40
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    GPIO_write_high(&PORTC, KEYPAD5);
 8a6:	65 e0       	ldi	r22, 0x05	; 5
 8a8:	88 e2       	ldi	r24, 0x28	; 40
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD6);
 8b0:	66 e0       	ldi	r22, 0x06	; 6
 8b2:	88 e2       	ldi	r24, 0x28	; 40
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	86 e2       	ldi	r24, 0x26	; 38
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	29 f4       	brne	.+10     	; 0x8d2 <__vector_13+0x140>
    {keypad = 7; counter=0;}
 8c8:	87 e0       	ldi	r24, 0x07	; 7
 8ca:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 8ce:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)
 8d2:	61 e0       	ldi	r22, 0x01	; 1
 8d4:	86 e2       	ldi	r24, 0x26	; 38
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	29 f4       	brne	.+10     	; 0x8ea <__vector_13+0x158>
    {keypad = 8; counter=0;}
 8e0:	88 e0       	ldi	r24, 0x08	; 8
 8e2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 8e6:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	86 e2       	ldi	r24, 0x26	; 38
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	29 f4       	brne	.+10     	; 0x902 <__stack+0x3>
    {keypad = 9; counter=0;}
 8f8:	89 e0       	ldi	r24, 0x09	; 9
 8fa:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 8fe:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
		
	// Keypad third fourth
	GPIO_write_low(&PORTC, KEYPAD3);
 902:	63 e0       	ldi	r22, 0x03	; 3
 904:	88 e2       	ldi	r24, 0x28	; 40
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	GPIO_write_low(&PORTC, KEYPAD4);
 90c:	64 e0       	ldi	r22, 0x04	; 4
 90e:	88 e2       	ldi	r24, 0x28	; 40
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	GPIO_write_low(&PORTC, KEYPAD5);
 916:	65 e0       	ldi	r22, 0x05	; 5
 918:	88 e2       	ldi	r24, 0x28	; 40
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_write_low>
	GPIO_write_high(&PORTC, KEYPAD6);
 920:	66 e0       	ldi	r22, 0x06	; 6
 922:	88 e2       	ldi	r24, 0x28	; 40
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_write_high>
	if (GPIO_read(&PINC, KEYPAD0) == 1)
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	86 e2       	ldi	r24, 0x26	; 38
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	29 f4       	brne	.+10     	; 0x942 <__stack+0x43>
	{keypad = 10; counter=0;}
 938:	8a e0       	ldi	r24, 0x0A	; 10
 93a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 93e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
	if (GPIO_read(&PINC, KEYPAD1) == 1)
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	86 e2       	ldi	r24, 0x26	; 38
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 94c:	81 30       	cpi	r24, 0x01	; 1
 94e:	29 f4       	brne	.+10     	; 0x95a <__stack+0x5b>
	{keypad = 11; counter=0;}
 950:	8b e0       	ldi	r24, 0x0B	; 11
 952:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 956:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
	if (GPIO_read(&PINC, KEYPAD2) == 1)
 95a:	62 e0       	ldi	r22, 0x02	; 2
 95c:	86 e2       	ldi	r24, 0x26	; 38
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_read>
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	31 f4       	brne	.+12     	; 0x974 <__stack+0x75>
	{keypad = 12; counter=0;}	
 968:	8c e0       	ldi	r24, 0x0C	; 12
 96a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__data_end>
 96e:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <counter>
 972:	27 c0       	rjmp	.+78     	; 0x9c2 <__stack+0xc3>

    // Displaying information text by LCD and UART
	
	if (keypad == 0)
 974:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 978:	81 11       	cpse	r24, r1
 97a:	0b c0       	rjmp	.+22     	; 0x992 <__stack+0x93>
	{
		lcd_gotoxy(0, 1);
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("						");
 982:	81 e4       	ldi	r24, 0x41	; 65
 984:	94 e0       	ldi	r25, 0x04	; 4
 986:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("None input data... \r\n");
 98a:	81 e2       	ldi	r24, 0x21	; 33
 98c:	94 e0       	ldi	r25, 0x04	; 4
 98e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 1)                                                                                        // keypad value = 1, sine wave generation
 992:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	a1 f4       	brne	.+40     	; 0x9c2 <__stack+0xc3>
	{
		lcd_gotoxy(0, 1);
 99a:	61 e0       	ldi	r22, 0x01	; 1
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 9a2:	87 e3       	ldi	r24, 0x37	; 55
 9a4:	94 e0       	ldi	r25, 0x04	; 4
 9a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("SINE WAVE");
 9b2:	88 e4       	ldi	r24, 0x48	; 72
 9b4:	94 e0       	ldi	r25, 0x04	; 4
 9b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 697Hz and high f = 1209Hz. \r\n");
 9ba:	82 e5       	ldi	r24, 0x52	; 82
 9bc:	94 e0       	ldi	r25, 0x04	; 4
 9be:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	if (keypad == 2)                                                                                        // keypad value = 2, square wave generation
 9c2:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 9c6:	82 30       	cpi	r24, 0x02	; 2
 9c8:	a1 f4       	brne	.+40     	; 0x9f2 <__stack+0xf3>
	{
		lcd_gotoxy(0, 1);
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 9d2:	87 e3       	ldi	r24, 0x37	; 55
 9d4:	94 e0       	ldi	r25, 0x04	; 4
 9d6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 9da:	61 e0       	ldi	r22, 0x01	; 1
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("TRIANGLE WAVE");
 9e2:	8d e7       	ldi	r24, 0x7D	; 125
 9e4:	94 e0       	ldi	r25, 0x04	; 4
 9e6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 697Hz and high f = 1336Hz. \r\n");
 9ea:	8b e8       	ldi	r24, 0x8B	; 139
 9ec:	94 e0       	ldi	r25, 0x04	; 4
 9ee:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	if (keypad == 3)                                                                                        // keypad value = 3, rising sawtooth wave generation
 9f2:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 9f6:	83 30       	cpi	r24, 0x03	; 3
 9f8:	a1 f4       	brne	.+40     	; 0xa22 <__stack+0x123>
	{
		lcd_gotoxy(0, 1);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 a02:	87 e3       	ldi	r24, 0x37	; 55
 a04:	94 e0       	ldi	r25, 0x04	; 4
 a06:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("EXPONENTIAL WAVE");
 a12:	86 eb       	ldi	r24, 0xB6	; 182
 a14:	94 e0       	ldi	r25, 0x04	; 4
 a16:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 697Hz and high f = 1477Hz. \r\n");
 a1a:	87 ec       	ldi	r24, 0xC7	; 199
 a1c:	94 e0       	ldi	r25, 0x04	; 4
 a1e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	if (keypad == 4)                                                                                        // keypad value = 4, falling sawtooth wave generation
 a22:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 a26:	84 30       	cpi	r24, 0x04	; 4
 a28:	a1 f4       	brne	.+40     	; 0xa52 <__stack+0x153>
	{
		lcd_gotoxy(0, 1);
 a2a:	61 e0       	ldi	r22, 0x01	; 1
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 a32:	87 e3       	ldi	r24, 0x37	; 55
 a34:	94 e0       	ldi	r25, 0x04	; 4
 a36:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 a3a:	61 e0       	ldi	r22, 0x01	; 1
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("SQUARE WAVE");
 a42:	82 ef       	ldi	r24, 0xF2	; 242
 a44:	94 e0       	ldi	r25, 0x04	; 4
 a46:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 770Hz and high f = 1209Hz. \r\n");
 a4a:	8e ef       	ldi	r24, 0xFE	; 254
 a4c:	94 e0       	ldi	r25, 0x04	; 4
 a4e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	if (keypad == 5)                                                                                        // keypad value = 5, triangle wave generation
 a52:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 a56:	85 30       	cpi	r24, 0x05	; 5
 a58:	a1 f4       	brne	.+40     	; 0xa82 <__stack+0x183>
	{
		lcd_gotoxy(0, 1);
 a5a:	61 e0       	ldi	r22, 0x01	; 1
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 a62:	87 e3       	ldi	r24, 0x37	; 55
 a64:	94 e0       	ldi	r25, 0x04	; 4
 a66:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 a6a:	61 e0       	ldi	r22, 0x01	; 1
 a6c:	80 e0       	ldi	r24, 0x00	; 0
 a6e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("DIRAC PULSES");
 a72:	89 e2       	ldi	r24, 0x29	; 41
 a74:	95 e0       	ldi	r25, 0x05	; 5
 a76:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 770Hz and high f = 1336Hz. \r\n");
 a7a:	86 e3       	ldi	r24, 0x36	; 54
 a7c:	95 e0       	ldi	r25, 0x05	; 5
 a7e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	if (keypad == 6)                                                                                        // keypad value = 6, dirac pulses generation
 a82:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 a86:	86 30       	cpi	r24, 0x06	; 6
 a88:	a1 f4       	brne	.+40     	; 0xab2 <__stack+0x1b3>
	{
		lcd_gotoxy(0, 1);
 a8a:	61 e0       	ldi	r22, 0x01	; 1
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 a92:	87 e3       	ldi	r24, 0x37	; 55
 a94:	94 e0       	ldi	r25, 0x04	; 4
 a96:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 a9a:	61 e0       	ldi	r22, 0x01	; 1
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("NOISE SINUS WAVE");
 aa2:	81 e6       	ldi	r24, 0x61	; 97
 aa4:	95 e0       	ldi	r25, 0x05	; 5
 aa6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 770Hz and high f = 1477Hz. \r\n");
 aaa:	82 e7       	ldi	r24, 0x72	; 114
 aac:	95 e0       	ldi	r25, 0x05	; 5
 aae:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 7)
 ab2:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 ab6:	87 30       	cpi	r24, 0x07	; 7
 ab8:	a1 f4       	brne	.+40     	; 0xae2 <__stack+0x1e3>
	{
		lcd_gotoxy(0, 1);
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 ac2:	87 e3       	ldi	r24, 0x37	; 55
 ac4:	94 e0       	ldi	r25, 0x04	; 4
 ac6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 aca:	61 e0       	ldi	r22, 0x01	; 1
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 ad2:	8d e9       	ldi	r24, 0x9D	; 157
 ad4:	95 e0       	ldi	r25, 0x05	; 5
 ad6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 852Hz and high f = 1209Hz. \r\n");
 ada:	83 ea       	ldi	r24, 0xA3	; 163
 adc:	95 e0       	ldi	r25, 0x05	; 5
 ade:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 8)
 ae2:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 ae6:	88 30       	cpi	r24, 0x08	; 8
 ae8:	a1 f4       	brne	.+40     	; 0xb12 <__stack+0x213>
	{
		lcd_gotoxy(0, 1);
 aea:	61 e0       	ldi	r22, 0x01	; 1
 aec:	80 e0       	ldi	r24, 0x00	; 0
 aee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 af2:	87 e3       	ldi	r24, 0x37	; 55
 af4:	94 e0       	ldi	r25, 0x04	; 4
 af6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 b02:	8d e9       	ldi	r24, 0x9D	; 157
 b04:	95 e0       	ldi	r25, 0x05	; 5
 b06:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 852Hz and high f = 1336Hz. \r\n");
 b0a:	8e ec       	ldi	r24, 0xCE	; 206
 b0c:	95 e0       	ldi	r25, 0x05	; 5
 b0e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 9)
 b12:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 b16:	89 30       	cpi	r24, 0x09	; 9
 b18:	a1 f4       	brne	.+40     	; 0xb42 <__stack+0x243>
	{
		lcd_gotoxy(0, 1);
 b1a:	61 e0       	ldi	r22, 0x01	; 1
 b1c:	80 e0       	ldi	r24, 0x00	; 0
 b1e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 b22:	87 e3       	ldi	r24, 0x37	; 55
 b24:	94 e0       	ldi	r25, 0x04	; 4
 b26:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 b2a:	61 e0       	ldi	r22, 0x01	; 1
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 b32:	8d e9       	ldi	r24, 0x9D	; 157
 b34:	95 e0       	ldi	r25, 0x05	; 5
 b36:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 852Hz and high f = 1477Hz. \r\n");
 b3a:	89 ef       	ldi	r24, 0xF9	; 249
 b3c:	95 e0       	ldi	r25, 0x05	; 5
 b3e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 10)
 b42:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 b46:	8a 30       	cpi	r24, 0x0A	; 10
 b48:	a1 f4       	brne	.+40     	; 0xb72 <__stack+0x273>
	{
		lcd_gotoxy(0, 1);
 b4a:	61 e0       	ldi	r22, 0x01	; 1
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 b52:	87 e3       	ldi	r24, 0x37	; 55
 b54:	94 e0       	ldi	r25, 0x04	; 4
 b56:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 b5a:	61 e0       	ldi	r22, 0x01	; 1
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 b62:	8d e9       	ldi	r24, 0x9D	; 157
 b64:	95 e0       	ldi	r25, 0x05	; 5
 b66:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 941Hz and high f = 1209Hz. \r\n");
 b6a:	84 e2       	ldi	r24, 0x24	; 36
 b6c:	96 e0       	ldi	r25, 0x06	; 6
 b6e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 11)
 b72:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 b76:	8b 30       	cpi	r24, 0x0B	; 11
 b78:	a1 f4       	brne	.+40     	; 0xba2 <__stack+0x2a3>
	{
		lcd_gotoxy(0, 1);
 b7a:	61 e0       	ldi	r22, 0x01	; 1
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 b82:	87 e3       	ldi	r24, 0x37	; 55
 b84:	94 e0       	ldi	r25, 0x04	; 4
 b86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 b8a:	61 e0       	ldi	r22, 0x01	; 1
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 b92:	8d e9       	ldi	r24, 0x9D	; 157
 b94:	95 e0       	ldi	r25, 0x05	; 5
 b96:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 941Hz and high f = 1336Hz. \r\n");
 b9a:	8f e4       	ldi	r24, 0x4F	; 79
 b9c:	96 e0       	ldi	r25, 0x06	; 6
 b9e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
	
	if (keypad == 12)
 ba2:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <__data_end>
 ba6:	8c 30       	cpi	r24, 0x0C	; 12
 ba8:	a1 f4       	brne	.+40     	; 0xbd2 <__stack+0x2d3>
	{
		lcd_gotoxy(0, 1);
 baa:	61 e0       	ldi	r22, 0x01	; 1
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("																");
 bb2:	87 e3       	ldi	r24, 0x37	; 55
 bb4:	94 e0       	ldi	r25, 0x04	; 4
 bb6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		lcd_gotoxy(0, 1);
 bba:	61 e0       	ldi	r22, 0x01	; 1
 bbc:	80 e0       	ldi	r24, 0x00	; 0
 bbe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_gotoxy>
		lcd_puts("RESET");
 bc2:	8d e9       	ldi	r24, 0x9D	; 157
 bc4:	95 e0       	ldi	r25, 0x05	; 5
 bc6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_puts>
		uart_puts("DTMF low f = 941Hz and high f = 1477Hz. \r\n");
 bca:	8a e7       	ldi	r24, 0x7A	; 122
 bcc:	96 e0       	ldi	r25, 0x06	; 6
 bce:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_puts>
	}
}
 bd2:	ff 91       	pop	r31
 bd4:	ef 91       	pop	r30
 bd6:	bf 91       	pop	r27
 bd8:	af 91       	pop	r26
 bda:	9f 91       	pop	r25
 bdc:	8f 91       	pop	r24
 bde:	7f 91       	pop	r23
 be0:	6f 91       	pop	r22
 be2:	5f 91       	pop	r21
 be4:	4f 91       	pop	r20
 be6:	3f 91       	pop	r19
 be8:	2f 91       	pop	r18
 bea:	0f 90       	pop	r0
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	0f 90       	pop	r0
 bf0:	1f 90       	pop	r1
 bf2:	18 95       	reti

00000bf4 <__vector_18>:
 bf4:	1f 92       	push	r1
 bf6:	0f 92       	push	r0
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	0f 92       	push	r0
 bfc:	11 24       	eor	r1, r1
 bfe:	2f 93       	push	r18
 c00:	8f 93       	push	r24
 c02:	9f 93       	push	r25
 c04:	ef 93       	push	r30
 c06:	ff 93       	push	r31
 c08:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 c0c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 c10:	8c 71       	andi	r24, 0x1C	; 28
 c12:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <UART_RxHead>
 c16:	ef 5f       	subi	r30, 0xFF	; 255
 c18:	ef 71       	andi	r30, 0x1F	; 31
 c1a:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <UART_RxTail>
 c1e:	e9 17       	cp	r30, r25
 c20:	39 f0       	breq	.+14     	; 0xc30 <__vector_18+0x3c>
 c22:	e0 93 aa 06 	sts	0x06AA, r30	; 0x8006aa <UART_RxHead>
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	e3 55       	subi	r30, 0x53	; 83
 c2a:	f9 4f       	sbci	r31, 0xF9	; 249
 c2c:	20 83       	st	Z, r18
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <__vector_18+0x3e>
 c30:	82 e0       	ldi	r24, 0x02	; 2
 c32:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <UART_LastRxError>
 c36:	89 2b       	or	r24, r25
 c38:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <UART_LastRxError>
 c3c:	ff 91       	pop	r31
 c3e:	ef 91       	pop	r30
 c40:	9f 91       	pop	r25
 c42:	8f 91       	pop	r24
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	0f 90       	pop	r0
 c4c:	1f 90       	pop	r1
 c4e:	18 95       	reti

00000c50 <__vector_19>:
 c50:	1f 92       	push	r1
 c52:	0f 92       	push	r0
 c54:	0f b6       	in	r0, 0x3f	; 63
 c56:	0f 92       	push	r0
 c58:	11 24       	eor	r1, r1
 c5a:	8f 93       	push	r24
 c5c:	9f 93       	push	r25
 c5e:	ef 93       	push	r30
 c60:	ff 93       	push	r31
 c62:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <UART_TxHead>
 c66:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <UART_TxTail>
 c6a:	98 17       	cp	r25, r24
 c6c:	69 f0       	breq	.+26     	; 0xc88 <__vector_19+0x38>
 c6e:	e0 91 ab 06 	lds	r30, 0x06AB	; 0x8006ab <UART_TxTail>
 c72:	ef 5f       	subi	r30, 0xFF	; 255
 c74:	ef 73       	andi	r30, 0x3F	; 63
 c76:	e0 93 ab 06 	sts	0x06AB, r30	; 0x8006ab <UART_TxTail>
 c7a:	f0 e0       	ldi	r31, 0x00	; 0
 c7c:	e3 53       	subi	r30, 0x33	; 51
 c7e:	f9 4f       	sbci	r31, 0xF9	; 249
 c80:	80 81       	ld	r24, Z
 c82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <__vector_19+0x42>
 c88:	e1 ec       	ldi	r30, 0xC1	; 193
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	80 81       	ld	r24, Z
 c8e:	8f 7d       	andi	r24, 0xDF	; 223
 c90:	80 83       	st	Z, r24
 c92:	ff 91       	pop	r31
 c94:	ef 91       	pop	r30
 c96:	9f 91       	pop	r25
 c98:	8f 91       	pop	r24
 c9a:	0f 90       	pop	r0
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	0f 90       	pop	r0
 ca0:	1f 90       	pop	r1
 ca2:	18 95       	reti

00000ca4 <uart_init>:
 ca4:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <UART_TxHead>
 ca8:	10 92 ab 06 	sts	0x06AB, r1	; 0x8006ab <UART_TxTail>
 cac:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <UART_RxHead>
 cb0:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <UART_RxTail>
 cb4:	99 23       	and	r25, r25
 cb6:	1c f4       	brge	.+6      	; 0xcbe <uart_init+0x1a>
 cb8:	22 e0       	ldi	r18, 0x02	; 2
 cba:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 cbe:	90 78       	andi	r25, 0x80	; 128
 cc0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 cc4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 cc8:	88 e9       	ldi	r24, 0x98	; 152
 cca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 cce:	86 e0       	ldi	r24, 0x06	; 6
 cd0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 cd4:	08 95       	ret

00000cd6 <uart_putc>:
 cd6:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <UART_TxHead>
 cda:	2f 5f       	subi	r18, 0xFF	; 255
 cdc:	2f 73       	andi	r18, 0x3F	; 63
 cde:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <UART_TxTail>
 ce2:	29 17       	cp	r18, r25
 ce4:	e1 f3       	breq	.-8      	; 0xcde <uart_putc+0x8>
 ce6:	e2 2f       	mov	r30, r18
 ce8:	f0 e0       	ldi	r31, 0x00	; 0
 cea:	e3 53       	subi	r30, 0x33	; 51
 cec:	f9 4f       	sbci	r31, 0xF9	; 249
 cee:	80 83       	st	Z, r24
 cf0:	20 93 ac 06 	sts	0x06AC, r18	; 0x8006ac <UART_TxHead>
 cf4:	e1 ec       	ldi	r30, 0xC1	; 193
 cf6:	f0 e0       	ldi	r31, 0x00	; 0
 cf8:	80 81       	ld	r24, Z
 cfa:	80 62       	ori	r24, 0x20	; 32
 cfc:	80 83       	st	Z, r24
 cfe:	08 95       	ret

00000d00 <uart_puts>:
 d00:	cf 93       	push	r28
 d02:	df 93       	push	r29
 d04:	ec 01       	movw	r28, r24
 d06:	88 81       	ld	r24, Y
 d08:	88 23       	and	r24, r24
 d0a:	31 f0       	breq	.+12     	; 0xd18 <uart_puts+0x18>
 d0c:	21 96       	adiw	r28, 0x01	; 1
 d0e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <uart_putc>
 d12:	89 91       	ld	r24, Y+
 d14:	81 11       	cpse	r24, r1
 d16:	fb cf       	rjmp	.-10     	; 0xd0e <uart_puts+0xe>
 d18:	df 91       	pop	r29
 d1a:	cf 91       	pop	r28
 d1c:	08 95       	ret

00000d1e <__tablejump2__>:
 d1e:	ee 0f       	add	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	05 90       	lpm	r0, Z+
 d24:	f4 91       	lpm	r31, Z
 d26:	e0 2d       	mov	r30, r0
 d28:	09 94       	ijmp

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
